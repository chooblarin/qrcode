package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
)

// polynomial: x^8 = x^4 + x^3 + x^2 + 1
const g = 1<<8 + 1<<4 + 1<<3 + 1<<2 + 1

var expTable [256]element
var logTable [256]int

// element is GF(2^8) performed modulo x^8 + x^4 + x^3 + x^2 + 1.
type element uint8

func main() {
	var buf bytes.Buffer

	fmt.Fprintln(&buf, "// Code generated by gen/main.go; DO NOT EDIT.")
	fmt.Fprintln(&buf)
	fmt.Fprintln(&buf, "package element")

	precomputeTable(&buf)

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	if err := os.WriteFile("table_gen.go", out, 0o644); err != nil {
		log.Fatal(err)
	}
}

func precomputeTable(buf *bytes.Buffer) {
	fmt.Fprintln(buf, "// expTable is pre-computed value of expTable[n] = a^n performed modulo x^8 + x^4 + x^3 + x^2 + 1.")
	fmt.Fprintln(buf, "var expTable = [256]Element{")
	var v uint = 1
	for i := 0; i < 16; i++ {
		for j := 0; j < 16; j++ {
			fmt.Fprintf(buf, "0x%02x,", v)
			if i*16+j < 255 {
				logTable[v] = i*16 + j
				expTable[i*16+j] = element(v)
			}
			v <<= 1
			v ^= (v >> 8) * g
		}
		fmt.Fprintln(buf)
	}
	fmt.Fprintln(buf, "}")
	fmt.Fprintln(buf)
	fmt.Fprintln(buf, "// expTable is pre-computed value of a^logTable[n] = n performed modulo x^8 + x^4 + x^3 + x^2 + 1.")
	fmt.Fprintln(buf, "var logTable = [256]int{ // uint8 is enough, however it is int because avoid to overflow during calculation")
	for i := 0; i < 16; i++ {
		for j := 0; j < 16; j++ {
			fmt.Fprintf(buf, "0x%02x,", logTable[i*16+j])
		}
		fmt.Fprintln(buf)
	}
	fmt.Fprintln(buf, "}")
}
